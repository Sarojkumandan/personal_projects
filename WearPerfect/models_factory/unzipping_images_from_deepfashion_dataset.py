# -*- coding: utf-8 -*-
"""unzipping_images_from _deepfashion_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ncq-z2AuOORmvResGuB9wDllR2XJQJ19

Add the images zip as a shorcut in your google drive and then copy it into your drive from https://github.com/yumingj/DeepFashion-MultiModal?tab=readme-ov-file
"""

import zipfile
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import os

# Path to the copied zip file
zip_path = '/content/drive/MyDrive/images_1.zip'


output_folder = '/content/drive/MyDrive/unzipped_images'
os.makedirs(output_folder, exist_ok=True)

# Unzip directly
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(output_folder)

print("Extracted successfully!")


# Correct folder path where images actually are
folder_path = '/content/drive/MyDrive/unzipped_images/images'

# List all files inside the correct folder
all_files = os.listdir(folder_path)

# Filter only image files
image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.webp')
image_files = [file for file in all_files if file.lower().endswith(image_extensions)]

# Check the count
print(f"Total number of images: {len(image_files)}")



"""# Mapping attributes with respect to images(Attributes are available in dataset)"""


# Defining the mappings
attribute_mappings = {
    'sleeve_length': ['sleeveless', 'short-sleeve', 'medium-sleeve', 'long-sleeve', 'not long-sleeve', 'NA'],
    'lower_clothing_length': ['three-point', 'medium short', 'three-quarter', 'long', 'NA'],
    'socks': ['no', 'socks', 'leggings', 'NA'],
    'hat': ['no', 'yes', 'NA'],
    'glasses': ['no', 'eyeglasses', 'sunglasses', 'have a glasses in hand or clothes', 'NA'],
    'neckwear': ['no', 'yes', 'NA'],
    'wrist_wearing': ['no', 'yes', 'NA'],
    'ring': ['no', 'yes', 'NA'],
    'waist_accessories': ['no', 'belt', 'have a clothing', 'hidden', 'NA'],
    'neckline': ['V-shape', 'square', 'round', 'standing', 'lapel', 'suspenders', 'NA'],
    'outer_clothing_cardigan': ['yes', 'no', 'NA'],
    'upper_clothing_covering_navel': ['no', 'yes', 'NA']
}

# Attribute columns in order
columns = [
    'sleeve_length', 'lower_clothing_length', 'socks', 'hat', 'glasses',
    'neckwear', 'wrist_wearing', 'ring', 'waist_accessories', 'neckline',
    'outer_clothing_cardigan', 'upper_clothing_covering_navel'
]

# Read the annotation file
annotations = []
with open('/content/drive/MyDrive/shape_anno_all.txt', 'r') as file:
    for line in file:
        parts = line.strip().split()
        img_name = parts[0]
        values = list(map(int, parts[1:]))
        # Map the numbers to text using attribute_mappings
        mapped_values = [attribute_mappings[col][val] if val < len(attribute_mappings[col]) else 'Unknown' for col, val in zip(columns, values)]
        annotations.append([img_name] + mapped_values)

# Create a DataFrame
df = pd.DataFrame(annotations, columns=['Image_ID'] + columns)

# Save to CSV
output_csv_path = '/content/drive/MyDrive/shape_annotations_mapped.csv'
df.to_csv(output_csv_path, index=False)

print(f"CSV file created successfully: {output_csv_path}")

df = pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped.csv')
df

df.isnull().sum()



le = LabelEncoder()
for col in columns:
  df[col] = le.fit_transform(df[col])

# Calculate the correlation matrix
correlation_matrix = df[columns].corr()

# Create the heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix Heatmap')
plt.show()

"""# Dropping columns that are not required"""

columns_to_drop = ['socks', 'hat', 'glasses', 'neckwear', 'wrist_wearing', 'ring', 'waist_accessories']
df = df.drop(columns=columns_to_drop)

df.to_csv('/content/drive/MyDrive/shape_annotations_mapped.csv', index=False)

df = pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped.csv')
df

df.isnull().sum()

df.dropna(inplace=True)

df

df.to_csv('/content/drive/MyDrive/shape_annotations_mapped.csv', index=False)

df = pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped.csv')
df

"""After removing null values and dropping unnecessary columns a final of 17000 images dataset is ready for model training

# Dividing top and bottom wear attributes separately for model training
"""


# Load the dataset
csv_file = "/content/drive/MyDrive/shape_annotations_mapped.csv"
df = pd.read_csv(csv_file)

# Define relevant attributes for each clothing type
top_wear_attributes = ["Image_ID", "sleeve_length", "neckline", "outer_clothing_cardigan", "upper_clothing_covering_navel"]
bottom_wear_attributes = ["Image_ID", "lower_clothing_length"]

# Select only the relevant columns (no filtering by Clothing_Type)
df_top_wear = df[top_wear_attributes]
df_bottom_wear = df[bottom_wear_attributes]

# Save the filtered data into new CSVs
df_top_wear.to_csv("/content/drive/MyDrive/17k_csv/filtered_top_wear.csv", index=False)
df_bottom_wear.to_csv("/content/drive/MyDrive/17k_csv/filtered_bottom_wear.csv", index=False)

print(" Filtered CSVs saved successfully for Top Wear and Bottom Wear!")