# -*- coding: utf-8 -*-
"""Cropping_Images_model_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dYTNw63um_9qGtkJwnt4Hp9SyiJ0osG-
"""

import os
import shutil
import pandas as pd
from concurrent.futures import ThreadPoolExecutor
import matplotlib.pyplot as plt
import pandas as pd
import cv2

df = pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped.csv')
df

# Load CSV and create a set for faster lookups
df = pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped.csv')
image_ids = set(df['Image_ID'])  # Directly convert to set

# Path configurations
images_folder = '/content/drive/MyDrive/unzipped_images/images'
output_folder = '/content/drive/MyDrive/17k_images'
os.makedirs(output_folder, exist_ok=True)

def copy_file(image_name):
    """Copy a single file from source to destination"""
    src_path = os.path.join(images_folder, image_name)
    dst_path = os.path.join(output_folder, image_name)
    shutil.copy(src_path, dst_path)

# Process files using multiple threads
with ThreadPoolExecutor(max_workers=10) as executor:  # Adjust workers based on your system
    # Use scandir for efficient directory scanning
    for entry in os.scandir(images_folder):
        if entry.is_file() and entry.name in image_ids:
            executor.submit(copy_file, entry.name)


print(f"Successfully copied {len(image_ids)} images.")


image_dir = '/content/drive/MyDrive/17k_images'
image_names = [f for f in os.listdir(image_dir) if os.path.isfile(os.path.join(image_dir, f))]

df = pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped.csv')

# Add a new column 'Image_Name' to the DataFrame
df['Image_Name'] = df['Image_ID'].map(lambda x: x if x in image_names else None)

#Save the updated dataframe
df.to_csv('/content/drive/MyDrive/shape_annotations_mapped_with_image_names.csv', index=False)

pd.read_csv('/content/drive/MyDrive/shape_annotations_mapped_with_image_names.csv')

"""# Cropping 17k images(top wear and bottom wear separately)"""


# Load CSV file (contains image names)
csv_file = "/content/drive/MyDrive/shape_annotations_mapped_with_image_names.csv"
df = pd.read_csv(csv_file)

# Get all image IDs
image_ids = list(df['Image_ID'])

# Create output directories
top_wear_dir = "/content/drive/MyDrive/cropped_images_17k/top_wear_17k"
bottom_wear_dir = "/content/drive/MyDrive/cropped_images_17k/bottom_wear_17k"
os.makedirs(top_wear_dir, exist_ok=True)
os.makedirs(bottom_wear_dir, exist_ok=True)

# Function to crop image into top or bottom half
def crop_image(image_path, crop_type):
    img = cv2.imread(image_path)
    if img is None:
        print(f"Error loading image: {image_path}")
        return None

    height, width, _ = img.shape

    if crop_type == "top":
        return img[:height // 2, :]
    elif crop_type == "bottom":
        return img[height // 2:, :]
    else:
        return None

# Process all images
for img_name in image_ids:
    img_path = f"/content/drive/MyDrive/17k_images/{img_name}"  # Assuming all images are here

    # Crop top wear
    top_cropped = crop_image(img_path, "top")
    if top_cropped is not None:
        cv2.imwrite(os.path.join(top_wear_dir, img_name), top_cropped)

    # Crop bottom wear
    bottom_cropped = crop_image(img_path, "bottom")
    if bottom_cropped is not None:
        cv2.imwrite(os.path.join(bottom_wear_dir, img_name), bottom_cropped)

print(f" Cropping complete: {len(image_ids)} top wear and {len(image_ids)} bottom wear images saved.")


top_wear_dir = '/content/drive/MyDrive/cropped_images_17k/top_wear_17k'
bottom_wear_dir = '/content/drive/MyDrive/cropped_images_17k/bottom_wear_17k'

def display_images(directory, num_images=10):
    image_files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
    num_images = min(num_images, len(image_files))  # Ensure we don't try to display more images than exist

    for i in range(num_images):
        img_path = os.path.join(directory, image_files[i])
        try:
            img = plt.imread(img_path)
            plt.imshow(img)
            plt.title(f"Image {i+1} from {img_path}")
            plt.axis('off')  # Hide axes
            plt.show()
        except Exception as e:
            print(f"Error displaying {img_path}: {e}")

# Display top wear images
display_images(top_wear_dir)

# Display bottom wear images
display_images(bottom_wear_dir)

# Correct folder path where images actually are
folder_path = '/content/drive/MyDrive/cropped_images_17k/bottom_wear_17k'

# List all files inside the correct folder
all_files = os.listdir(folder_path)

# Filter only image files
image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.webp')
image_files = [file for file in all_files if file.lower().endswith(image_extensions)]

# Check the count
print(f" Total number of images: {len(image_files)}")

